package photoprism

import (
	"errors"
	"fmt"
	"image"
	"image/color"
	"math"

	log "github.com/sirupsen/logrus"

	"github.com/disintegration/imaging"
	"github.com/lucasb-eyer/go-colorful"
)

type ColorPerception struct {
	Colors     IndexedColors
	MainColor  IndexedColor
	Luminance  LightMap
	Saturation Saturation
}

type IndexedColor uint16
type IndexedColors []IndexedColor

type Saturation uint8
type Luminance uint8
type LightMap []Luminance

const ColorSampleSize = 3

const (
	Black IndexedColor = iota
	Brown
	Grey
	White
	Purple
	Gold
	Blue
	Cyan
	Teal
	Green
	Lime
	Yellow
	Magenta
	Orange
	Red
	Pink
)

var IndexedColorNames = map[IndexedColor]string{
	Black:  "black",  // 0
	Brown:  "brown",  // 1
	Grey:   "grey",   // 2
	White:  "white",  // 3
	Purple: "purple", // 4
	Gold: "gold", // 5
	Blue:   "blue",   // 6
	Cyan:   "cyan",   // 7
	Teal:   "teal",   // 8
	Green:  "green",  // 9
	Lime:   "lime",   // A
	Yellow: "yellow", // B
	Magenta: "magenta",  // C
	Orange: "orange", // D
	Red:    "red",    // E
	Pink:   "pink",   // F
}

var IndexedColorWeight = map[IndexedColor]uint16{
	Black:  2,
	Brown:  1,
	Grey:   2,
	White:  2,
	Purple: 5,
	Gold: 	4,
	Blue:   3,
	Cyan:   4,
	Teal:   4,
	Green:  5,
	Lime:   5,
	Yellow: 5,
	Magenta:5,
	Orange: 4,
	Red:    4,
	Pink:   4,
}

func (c IndexedColor) Name() string {
	return IndexedColorNames[c]
}

func (c IndexedColor) Hex() string {
	return fmt.Sprintf("%X", c)
}

func (c IndexedColors) Hex() (result string) {
	for _, materialColor := range c {
		result += materialColor.Hex()
	}

	return result
}

func (s Saturation) Hex() string {
	return fmt.Sprintf("%X", s)
}

func (s Saturation) Uint() uint {
	return uint(s)
}

func (s Saturation) Int() int {
	return int(s)
}

func (l Luminance) Hex() string {
	return fmt.Sprintf("%X", l)
}

func (m LightMap) Hex() (result string) {
	for _, luminance := range m {
		result += luminance.Hex()
	}

	return result
}

var IndexedColorMap = map[color.RGBA]IndexedColor{
	{0x00, 0x00, 0x00, 0xff}: Black,
	{0x79, 0x55, 0x48, 0xff}: Brown,
	//{0xef, 0xeb, 0xe9, 0xff}: Brown,
	//{0xd7, 0xcc, 0xc8, 0xff}: Brown,
	//{0xbc, 0xaa, 0xa4, 0xff}: Brown,
	{0xa1, 0x88, 0x7f, 0xff}: Brown,
	{0x8d, 0x6e, 0x63, 0xff}: Brown,
	{0x6d, 0x4c, 0x41, 0xff}: Brown,
	{0x5d, 0x40, 0x37, 0xff}: Brown,
	//{0x4e, 0x34, 0x2e, 0xff}: Brown,
	//{0x3e, 0x27, 0x23, 0xff}: Brown,
	{0x9E, 0x9E, 0x9E, 0xff}: Grey,
	//{0xfa, 0xfa, 0xfa, 0xff}: Grey,
	//{0xf5, 0xf5, 0xf5, 0xff}: Grey,
	//{0xee, 0xee, 0xee, 0xff}: Grey,
	//{0xe0, 0xe0, 0xe0, 0xff}: Grey,
	//{0xbd, 0xbd, 0xbd, 0xff}: Grey,
	{0x75, 0x75, 0x75, 0xff}: Grey,
	{0x61, 0x61, 0x61, 0xff}: Grey,
	{0x42, 0x42, 0x42, 0xff}: Grey,
	//{0x21, 0x21, 0x21, 0xff}: Grey,
	{0xFF, 0xFF, 0xFF, 0xff}: White,
	{0x9c, 0x27, 0xb0, 0xff}: Purple,
	{0xf3, 0xe5, 0xf5, 0xff}: Purple,
	{0xe1, 0xbe, 0xe7, 0xff}: Purple,
	{0xce, 0x93, 0xd8, 0xff}: Purple,
	{0xba, 0x68, 0xc8, 0xff}: Purple,
	{0xab, 0x47, 0xbc, 0xff}: Purple,
	{0x8e, 0x24, 0xaa, 0xff}: Purple,
	{0x7b, 0x1f, 0xa2, 0xff}: Purple,
	{0x6a, 0x1b, 0x9a, 0xff}: Purple,
	{0x4a, 0x14, 0x8c, 0xff}: Purple,
	{0xea, 0x80, 0xfc, 0xff}: Purple,
	{0xe0, 0x40, 0xfb, 0xff}: Purple,
	{0xd5, 0x00, 0xf9, 0xff}: Purple,
	{0xaa, 0x00, 0xff, 0xff}: Purple,
	{0x67, 0x3a, 0xb7, 0xff}: Purple,
	{0xed, 0xe7, 0xf6, 0xff}: Purple,
	{0xd1, 0xc4, 0xe9, 0xff}: Purple,
	{0xb3, 0x9d, 0xdb, 0xff}: Purple,
	{0x95, 0x75, 0xcd, 0xff}: Purple,
	{0x7e, 0x57, 0xc2, 0xff}: Purple,
	{0x5e, 0x35, 0xb1, 0xff}: Purple,
	{0x51, 0x2d, 0xa8, 0xff}: Purple,
	{0x45, 0x27, 0xa0, 0xff}: Purple,
	{0x31, 0x1b, 0x92, 0xff}: Purple,
	{0xb3, 0x88, 0xff, 0xff}: Purple,
	{0x7c, 0x4d, 0xff, 0xff}: Purple,
	//{0x65, 0x1f, 0xff, 0xff}: Purple,
	//{0x62, 0x00, 0xea, 0xff}: Purple,
	{0x3F, 0x51, 0xB5, 0xff}: Blue,
	//{0xe8, 0xea, 0xf6, 0xff}: Blue,
	{0xc5, 0xca, 0xe9, 0xff}: Blue,
	//{0x9f, 0xa8, 0xda, 0xff}: Blue,
	//{0x79, 0x86, 0xcb, 0xff}: Blue,
	{0x5c, 0x6b, 0xc0, 0xff}: Blue,
	{0x39, 0x49, 0xab, 0xff}: Blue,
	{0x30, 0x3f, 0x9f, 0xff}: Blue,
	{0x28, 0x35, 0x93, 0xff}: Blue,
	{0x1a, 0x23, 0x7e, 0xff}: Blue,
	//{0x8c, 0x9e, 0xff, 0xff}: Blue,
	{0x53, 0x6d, 0xfe, 0xff}: Blue,
	{0x3d, 0x5a, 0xfe, 0xff}: Blue,
	{0x30, 0x4f, 0xfe, 0xff}: Blue,
	{0x21, 0x96, 0xF3, 0xff}: Blue,
	//{0xe3, 0xf2, 0xfd, 0xff}: Blue,
	{0xbb, 0xde, 0xfb, 0xff}: Blue,
	{0x90, 0xca, 0xf9, 0xff}: Blue,
	{0x64, 0xb5, 0xf6, 0xff}: Blue,
	{0x42, 0xa5, 0xf5, 0xff}: Blue,
	{0x1e, 0x88, 0xe5, 0xff}: Blue,
	{0x19, 0x76, 0xd2, 0xff}: Blue,
	{0x15, 0x65, 0xc0, 0xff}: Blue,
	{0x0d, 0x47, 0xa1, 0xff}: Blue,
	{0x82, 0xb1, 0xff, 0xff}: Blue,
	{0x44, 0x8a, 0xff, 0xff}: Blue,
	{0x29, 0x79, 0xff, 0xff}: Blue,
	{0x29, 0x62, 0xff, 0xff}: Blue,
	{0x03, 0xa9, 0xf6, 0xff}: Blue,
	//{0xe1, 0xf5, 0xfe, 0xff}: Blue,
	{0xb3, 0xe5, 0xfc, 0xff}: Blue,
	{0x81, 0xd4, 0xfa, 0xff}: Blue,
	{0x4f, 0xc3, 0xf7, 0xff}: Blue,
	{0x29, 0xb6, 0xf6, 0xff}: Blue,
	{0x03, 0x9b, 0xe5, 0xff}: Blue,
	{0x02, 0x88, 0xd1, 0xff}: Blue,
	{0x02, 0x77, 0xbd, 0xff}: Blue,
	{0x01, 0x57, 0x9b, 0xff}: Blue,
	{0x80, 0xd8, 0xff, 0xff}: Blue,
	{0x40, 0xc4, 0xff, 0xff}: Blue,
	{0x00, 0xb0, 0xff, 0xff}: Blue,
	{0x00, 0x91, 0xea, 0xff}: Blue,
	{0x60, 0x7d, 0x8b, 0xff}: Blue,
	//{0xec, 0xef, 0xf1, 0xff}: Blue,
	{0xcf, 0xd8, 0xdc, 0xff}: Blue,
	{0xb0, 0xbe, 0xc5, 0xff}: Blue,
	{0x90, 0xa4, 0xae, 0xff}: Blue,
	{0x78, 0x90, 0x9c, 0xff}: Blue,
	{0x54, 0x6e, 0x7a, 0xff}: Blue,
	{0x45, 0x5a, 0x64, 0xff}: Blue,
	{0x37, 0x47, 0x4f, 0xff}: Blue,
	//{0x26, 0x32, 0x38, 0xff}: Blue,
	{0x00, 0xBC, 0xD4, 0xff}: Cyan,
	{0xe0, 0xf7, 0xfa, 0xff}: Cyan,
	{0xb2, 0xeb, 0xf2, 0xff}: Cyan,
	{0x80, 0xde, 0xea, 0xff}: Cyan,
	{0x4d, 0xd0, 0xe1, 0xff}: Cyan,
	{0x26, 0xc6, 0xda, 0xff}: Cyan,
	{0x00, 0xac, 0xc1, 0xff}: Cyan,
	{0x00, 0x97, 0xa7, 0xff}: Cyan,
	{0x00, 0x83, 0x8f, 0xff}: Cyan,
	{0x00, 0x60, 0x64, 0xff}: Cyan,
	{0x84, 0xff, 0xff, 0xff}: Cyan,
	{0x18, 0xff, 0xff, 0xff}: Cyan,
	{0x00, 0xe5, 0xff, 0xff}: Cyan,
	{0x00, 0xb8, 0xd4, 0xff}: Cyan,
	{0x00, 0x96, 0x88, 0xff}: Teal,
	{0xe0, 0xf2, 0xf1, 0xff}: Teal,
	{0xb2, 0xdf, 0xdb, 0xff}: Teal,
	{0x80, 0xcb, 0xc4, 0xff}: Teal,
	{0x4d, 0xb6, 0xac, 0xff}: Teal,
	{0x26, 0xa6, 0x9a, 0xff}: Teal,
	{0x00, 0x89, 0x7b, 0xff}: Teal,
	{0x00, 0x79, 0x6b, 0xff}: Teal,
	{0x00, 0x69, 0x5c, 0xff}: Teal,
	{0x00, 0x4d, 0x40, 0xff}: Teal,
	{0xa7, 0xff, 0xeb, 0xff}: Teal,
	{0x64, 0xff, 0xda, 0xff}: Teal,
	{0x1d, 0xe9, 0xb6, 0xff}: Teal,
	//{0x00, 0xbf, 0xa5, 0xff}: Teal,
	{0x4C, 0xAF, 0x50, 0xff}: Green,
	{0xe8, 0xf5, 0xe9, 0xff}: Green,
	{0xc8, 0xe6, 0xc9, 0xff}: Green,
	{0xa5, 0xd6, 0xa7, 0xff}: Green,
	{0x81, 0xc7, 0x84, 0xff}: Green,
	{0x66, 0xbb, 0x6a, 0xff}: Green,
	{0x43, 0xa0, 0x47, 0xff}: Green,
	{0x38, 0x8e, 0x3c, 0xff}: Green,
	{0x2e, 0x7d, 0x32, 0xff}: Green,
	{0x1b, 0x5e, 0x20, 0xff}: Green,
	{0xb9, 0xf6, 0xca, 0xff}: Green,
	{0x69, 0xf0, 0xae, 0xff}: Green,
	{0x00, 0xe6, 0x76, 0xff}: Green,
	{0x00, 0xc8, 0x53, 0xff}: Green,
	{0x8b, 0xc3, 0x4a, 0xff}: Green,
	{0xf1, 0xf8, 0xe9, 0xff}: Green,
	{0xdc, 0xed, 0xc8, 0xff}: Green,
	{0xc5, 0xe1, 0xa5, 0xff}: Green,
	{0xae, 0xd5, 0x81, 0xff}: Green,
	{0x9c, 0xcc, 0x65, 0xff}: Green,
	{0x7c, 0xb3, 0x42, 0xff}: Green,
	{0x68, 0x9f, 0x38, 0xff}: Green,
	{0x55, 0x8b, 0x2f, 0xff}: Green,
	{0x33, 0x69, 0x1e, 0xff}: Green,
	{0xcc, 0xff, 0x90, 0xff}: Green,
	{0xb2, 0xff, 0x59, 0xff}: Green,
	{0x76, 0xff, 0x03, 0xff}: Green,
	{0x64, 0xdd, 0x17, 0xff}: Green,
	{0xCD, 0xDC, 0x39, 0xff}: Lime,
	//{0xf9, 0xfb, 0xe7, 0xff}: Lime,
	{0xf0, 0xf4, 0xc3, 0xff}: Lime,
	{0xe6, 0xee, 0x9c, 0xff}: Lime,
	{0xdc, 0xe7, 0x75, 0xff}: Lime,
	{0xd4, 0xe1, 0x57, 0xff}: Lime,
	{0xc0, 0xca, 0x33, 0xff}: Lime,
	{0xaf, 0xb4, 0x2b, 0xff}: Lime,
	//{0x9e, 0x9d, 0x24, 0xff}: Lime,
	//{0x82, 0x77, 0x17, 0xff}: Lime,
	//{0xf4, 0xff, 0x81, 0xff}: Lime,
	{0xee, 0xff, 0x41, 0xff}: Lime,
	{0xc6, 0xff, 0x00, 0xff}: Lime,
	{0xae, 0xea, 0x00, 0xff}: Lime,
	{0xff, 0xEB, 0x3B, 0xff}: Yellow,
	{0xff, 0xfd, 0xe7, 0xff}: Yellow,
	{0xff, 0xf9, 0xc4, 0xff}: Yellow,
	{0xff, 0xf5, 0x9d, 0xff}: Yellow,
	{0xff, 0xf1, 0x76, 0xff}: Yellow,
	{0xff, 0xee, 0x58, 0xff}: Yellow,
	{0xfd, 0xd8, 0x35, 0xff}: Yellow,
	{0xfb, 0xc0, 0x2d, 0xff}: Yellow,
	{0xf9, 0xa8, 0x25, 0xff}: Yellow,
	//{0xf5, 0x7f, 0x17, 0xff}: Yellow,
	{0xff, 0xff, 0x8d, 0xff}: Yellow,
	{0xff, 0xff, 0x00, 0xff}: Yellow,
	{0xff, 0xea, 0x00, 0xff}: Yellow,
	{0xff, 0xd6, 0x00, 0xff}: Yellow,
	{0xFF, 0xC1, 0x07, 0xff}: Yellow,
	{0xff, 0xf8, 0xe1, 0xff}: Yellow,
	{0xff, 0xec, 0xb3, 0xff}: Yellow,
	{0xff, 0xe0, 0x82, 0xff}: Yellow,
	{0xff, 0xd5, 0x4f, 0xff}: Yellow,
	{0xff, 0xca, 0x28, 0xff}: Yellow,
	//{0xff, 0xb3, 0x00, 0xff}: Yellow,
	//{0xff, 0xa0, 0x00, 0xff}: Yellow,
	//{0xff, 0x8f, 0x00, 0xff}: Yellow,
	//{0xff, 0x6f, 0x00, 0xff}: Yellow,
	{0xff, 0xe5, 0x7f, 0xff}: Yellow,
	{0xff, 0xd7, 0x40, 0xff}: Yellow,
	{0xff, 0xc4, 0x00, 0xff}: Yellow,
	//{0xff, 0xab, 0x00, 0xff}: Yellow,
	{0xFF, 0x98, 0x00, 0xff}: Orange,
	{0xff, 0xf3, 0xe0, 0xff}: Orange,
	{0xff, 0xe0, 0xb2, 0xff}: Orange,
	{0xff, 0xcc, 0x80, 0xff}: Orange,
	{0xff, 0xb7, 0x4d, 0xff}: Orange,
	{0xff, 0xa7, 0x26, 0xff}: Orange,
	{0xfb, 0x8c, 0x00, 0xff}: Orange,
	{0xf5, 0x7c, 0x00, 0xff}: Orange,
	{0xef, 0x6c, 0x00, 0xff}: Orange,
	{0xe6, 0x51, 0x00, 0xff}: Orange,
	{0xff, 0xd1, 0x80, 0xff}: Orange,
	{0xff, 0xab, 0x40, 0xff}: Orange,
	{0xff, 0x91, 0x00, 0xff}: Orange,
	{0xff, 0x6d, 0x00, 0xff}: Orange,
	{0xff, 0x57, 0x22, 0xff}: Orange,
	{0xfb, 0xe9, 0xe7, 0xff}: Orange,
	{0xff, 0xcc, 0xbc, 0xff}: Orange,
	{0xff, 0xab, 0x91, 0xff}: Orange,
	{0xff, 0x8a, 0x65, 0xff}: Orange,
	{0xff, 0x70, 0x43, 0xff}: Orange,
	{0xf4, 0x51, 0x1e, 0xff}: Orange,
	{0xe6, 0x4a, 0x19, 0xff}: Orange,
	{0xd8, 0x43, 0x15, 0xff}: Orange,
	//{0xbf, 0x36, 0x0c, 0xff}: Orange,
	{0xff, 0x9e, 0x80, 0xff}: Orange,
	{0xff, 0x6e, 0x40, 0xff}: Orange,
	{0xff, 0x3d, 0x00, 0xff}: Orange,
	//{0xdd, 0x2c, 0x00, 0xff}: Orange,
	{0xf4, 0x43, 0x36, 0xff}: Red,
	//{0xff, 0xeb, 0xee, 0xff}: Red,
	//{0xff, 0xcd, 0xd2, 0xff}: Red,
	{0xef, 0x9a, 0x9a, 0xff}: Red,
	{0x68, 0x0e, 0x19, 0xff}: Red,
	{0xe5, 0x73, 0x73, 0xff}: Red,
	{0xef, 0x53, 0x50, 0xff}: Red,
	{0xe5, 0x39, 0x35, 0xff}: Red,
	{0xd3, 0x2f, 0x2f, 0xff}: Red,
	{0xc6, 0x28, 0x28, 0xff}: Red,
	{0xb7, 0x1c, 0x1c, 0xff}: Red,
	//{0xff, 0x8a, 0x80, 0xff}: Red,
	{0xff, 0x52, 0x52, 0xff}: Red,
	//{0xff, 0x17, 0x44, 0xff}: Red,
	{0xd5, 0x00, 0x00, 0xff}: Red,
	{0xe9, 0x1e, 0x63, 0xff}: Pink,
	{0xfc, 0xe4, 0xec, 0xff}: Pink,
	{0xf8, 0xbb, 0xd0, 0xff}: Pink,
	{0xf4, 0x8f, 0xb1, 0xff}: Pink,
	{0xf0, 0x62, 0x92, 0xff}: Pink,
	{0xec, 0x40, 0x7a, 0xff}: Pink,
	{0xd8, 0x1b, 0x60, 0xff}: Pink,
	{0xc2, 0x18, 0x5b, 0xff}: Pink,
	//{0xad, 0x14, 0x57, 0xff}: Pink,
	//{0x88, 0x0e, 0x4f, 0xff}: Pink,
	{0xff, 0x80, 0xab, 0xff}: Pink,
	{0xff, 0x40, 0x81, 0xff}: Pink,
	{0xf5, 0x00, 0x57, 0xff}: Pink,
	//{0xc5, 0x11, 0x62, 0xff}: Pink,
	{0xff, 0x00, 0xff, 0xff}: Magenta,
	{0xe5, 0x00, 0xe5, 0xff}: Magenta,
	{0xcc, 0x00, 0xcc, 0xff}: Magenta,
	{0xb2, 0x00, 0xb2, 0xff}: Magenta,
	{0x99, 0x00, 0x99, 0xff}: Magenta,
	{0x7f, 0x00, 0x7f, 0xff}: Magenta,
	{0x66, 0x00, 0x66, 0xff}: Magenta,
	{0x74, 0x00, 0x58, 0xff}: Magenta,
	{0x8d, 0x00, 0x6b, 0xff}: Magenta,
	{0xb0, 0x00, 0x85, 0xff}: Magenta,
	{0xce, 0x00, 0x9b, 0xff}: Magenta,
	{0xf0, 0x00, 0xb5, 0xff}: Magenta,
	// {0xff, 0xdf, 0x00, 0xff}: Gold,
	{0xf3, 0xd0, 0x88, 0xff}: Gold,
	{0xa2, 0x7d, 0x4b, 0xff}: Gold,
	{0x75, 0x55, 0x31, 0xff}: Gold,
	{0xa6, 0x80, 0x40, 0xff}: Gold,
	{0xdb, 0xa5, 0x15, 0xff}: Gold,
	{0xb8, 0x91, 0x6e, 0xff}: Gold,
	{0xe1, 0xd1, 0x9e, 0xff}: Gold,
	{0xd4, 0xaf, 0x37, 0xff}: Gold,
	{0xdd, 0xbf, 0x5d, 0xff}: Gold,
	{0xed, 0xde, 0xac, 0xff}: Gold,
	{0xe9, 0xd6, 0x97, 0xff}: Gold,
	{0xe4, 0xcc, 0x7d, 0xff}: Gold,
	{0xd4, 0xaf, 0x34, 0xff}: Gold,
	// {0xcf, 0xb5, 0x3b, 0xff}: Gold,
	// {0xc5, 0xb3, 0x58, 0xff}: Gold,
	{0xbf, 0x9b, 0x30, 0xff}: Gold,
	{0xe5, 0xc1, 0x00, 0xff}: Gold,
	{0xcc, 0xac, 0x00, 0xff}: Gold,
}

func ColorfulToIndexedColor(actualColor colorful.Color) (result IndexedColor) {
	var distance = 1.0

	for rgba, i := range IndexedColorMap {
		colorColorful, _ := colorful.MakeColor(rgba)
		currentDistance := colorColorful.DistanceLab(actualColor)

		if distance >= currentDistance {
			distance = currentDistance
			result = i
		}
	}

	return result
}

func (m *MediaFile) Resize(width, height int) (result *image.NRGBA, err error) {
	jpeg, err := m.Jpeg()

	if err != nil {
		return nil, err
	}

	img, err := imaging.Open(jpeg.Filename(), imaging.AutoOrientation(true))

	if err != nil {
		return nil, err
	}

	return imaging.Resize(img, width, height, imaging.Box), nil
}

// Colors returns color information for a media file.
func (m *MediaFile) Colors() (perception ColorPerception, err error) {
	if !m.IsJpeg() {
		return perception, errors.New("no color information: not a JPEG file")
	}

	img, err := m.Resize(ColorSampleSize, ColorSampleSize)

	if err != nil {
		log.Printf("can't open image: %s", err.Error())

		return perception, err
	}

	bounds := img.Bounds()
	width, height := bounds.Max.X, bounds.Max.Y
	pixels := float64(width * height)
	saturationSum := 0.0

	colorCount := make(map[IndexedColor]uint16)
	var mainColorCount uint16

	for y := 0; y < height; y++ {
		for x := 0; x < width; x++ {
			r, g, b, a := img.At(x, y).RGBA()
			rgb, _ := colorful.MakeColor(color.RGBA{R: uint8(r), G: uint8(g), B: uint8(b), A: uint8(a)})
			i := ColorfulToIndexedColor(rgb)
			perception.Colors = append(perception.Colors, i)

			if _, ok := colorCount[i]; ok == true {
				colorCount[i] += IndexedColorWeight[i]
			} else {
				colorCount[i] = IndexedColorWeight[i]
			}

			if colorCount[i] > mainColorCount {
				mainColorCount = colorCount[i]
				perception.MainColor = i
			}

			_, s, l := rgb.Hsl()

			saturationSum += s

			perception.Luminance = append(perception.Luminance, Luminance(math.Round(l*15)))
		}
	}

	perception.Saturation = Saturation(math.Round((saturationSum / pixels) * 15))

	return perception, nil
}
